{"ast":null,"code":"var _jsxFileName = \"/Users/carsonmoore/Downloads/summer24/cs3750/CS-3750-Hangman/frontend/src/App.js\",\n  _s = $RefreshSig$();\n/*import React from \"react\";\n \n// We use Route in order to define the different routes of our application\nimport { Route, Routes } from \"react-router-dom\";\n \n// We import all the components we need in our app\nimport RecordList from \"./components/recordList\";\nimport Edit from \"./components/edit\";\n\n \nconst App = () => {\n return (\n   <div>\n    <h1>Hello World</h1>\n     <Routes>\n       <Route exact path=\"/\" element={<RecordList />} />\n     </Routes>\n   </div>\n );\n};\n \nexport default App;*/\n\nimport React, { useState } from 'react';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst words = [\"react\", \"hangman\", \"javascript\", \"frontend\"];\nconst getRandomWord = () => {\n  return words[Math.floor(Math.random() * words.length)];\n};\nconst App = () => {\n  _s();\n  const [word, setWord] = useState(getRandomWord());\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const maxWrongGuesses = 6;\n  const handleGuess = letter => {\n    if (guessedLetters.includes(letter)) return;\n    setGuessedLetters([...guessedLetters, letter]);\n    if (!word.includes(letter)) {\n      setWrongGuesses(wrongGuesses + 1);\n    }\n  };\n  const handleReset = () => {\n    setWord(getRandomWord());\n    setGuessedLetters([]);\n    setWrongGuesses(0);\n  };\n  const renderWord = () => {\n    return word.split('').map((letter, index) => guessedLetters.includes(letter) ? letter : '_').join(' ');\n  };\n  const renderAlphabetButtons = () => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    return alphabet.split('').map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleGuess(letter),\n      disabled: guessedLetters.includes(letter) || wrongGuesses >= maxWrongGuesses,\n      children: letter\n    }, letter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this));\n  };\n  const isGameOver = wrongGuesses >= maxWrongGuesses;\n  const isGameWon = word.split('').every(letter => guessedLetters.includes(letter));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hangman Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Word: \", renderWord()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wrong guesses: \", wrongGuesses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderAlphabetButtons()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Game Over! The word was: \", word]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 22\n    }, this), isGameWon && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Congratulations! You've guessed the word!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"3jjh8VBOSLb8CCTygnfAvyyGIi4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","words","getRandomWord","Math","floor","random","length","App","_s","word","setWord","guessedLetters","setGuessedLetters","wrongGuesses","setWrongGuesses","maxWrongGuesses","handleGuess","letter","includes","handleReset","renderWord","split","map","index","join","renderAlphabetButtons","alphabet","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","isGameOver","isGameWon","every","className","_c","$RefreshReg$"],"sources":["/Users/carsonmoore/Downloads/summer24/cs3750/CS-3750-Hangman/frontend/src/App.js"],"sourcesContent":["/*import React from \"react\";\n \n// We use Route in order to define the different routes of our application\nimport { Route, Routes } from \"react-router-dom\";\n \n// We import all the components we need in our app\nimport RecordList from \"./components/recordList\";\nimport Edit from \"./components/edit\";\n\n \nconst App = () => {\n return (\n   <div>\n    <h1>Hello World</h1>\n     <Routes>\n       <Route exact path=\"/\" element={<RecordList />} />\n     </Routes>\n   </div>\n );\n};\n \nexport default App;*/\n\nimport React, { useState } from 'react';\nimport './styles.css';\n\nconst words = [\"react\", \"hangman\", \"javascript\", \"frontend\"];\n\nconst getRandomWord = () => {\n  return words[Math.floor(Math.random() * words.length)];\n};\n\nconst App = () => {\n  const [word, setWord] = useState(getRandomWord());\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const maxWrongGuesses = 6;\n\n  const handleGuess = (letter) => {\n    if (guessedLetters.includes(letter)) return;\n\n    setGuessedLetters([...guessedLetters, letter]);\n\n    if (!word.includes(letter)) {\n      setWrongGuesses(wrongGuesses + 1);\n    }\n  };\n\n  const handleReset = () => {\n    setWord(getRandomWord());\n    setGuessedLetters([]);\n    setWrongGuesses(0);\n  };\n\n  const renderWord = () => {\n    return word.split('').map((letter, index) => (\n      guessedLetters.includes(letter) ? letter : '_'\n    )).join(' ');\n  };\n\n  const renderAlphabetButtons = () => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    return alphabet.split('').map((letter) => (\n      <button\n        key={letter}\n        onClick={() => handleGuess(letter)}\n        disabled={guessedLetters.includes(letter) || wrongGuesses >= maxWrongGuesses}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const isGameOver = wrongGuesses >= maxWrongGuesses;\n  const isGameWon = word.split('').every(letter => guessedLetters.includes(letter));\n\n  return (\n    <div className=\"App\">\n      <h1>Hangman Game</h1>\n      <p>Word: {renderWord()}</p>\n      <p>Wrong guesses: {wrongGuesses}</p>\n      <div>{renderAlphabetButtons()}</div>\n      {isGameOver && <p>Game Over! The word was: {word}</p>}\n      {isGameWon && <p>Congratulations! You've guessed the word!</p>}\n      <button onClick={handleReset}>Reset Game</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}