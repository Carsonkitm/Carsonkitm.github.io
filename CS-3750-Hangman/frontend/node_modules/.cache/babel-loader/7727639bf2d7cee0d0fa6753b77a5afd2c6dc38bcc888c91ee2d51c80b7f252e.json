{"ast":null,"code":"var _jsxFileName = \"/Users/carsonmoore/Downloads/summer24/cs3750/CS-3750-Hangman/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { Route, Routes } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport Highscore from './Highscores';\nimport RecordList from \"./components/recordList\";\n\n// import all the sessions we need, using session_set as maybe our start page???\nimport Session_Set from \"./components/session_set.js\";\nimport Session_Delete from \"./components/session_delete.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [word, setWord] = useState('');\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const [incorrectLetters, setIncorrectLetters] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [showHighscore, setShowHighscore] = useState(false);\n  const maxWrongGuesses = 6;\n\n  // Fetch the random word from the server\n  useEffect(() => {\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word); // Adjust according to your response structure\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n    fetchRandomWord();\n  }, []);\n  const handleGuess = letter => {\n    if (guessedLetters.includes(letter) || incorrectLetters.includes(letter)) return;\n    if (word.includes(letter)) {\n      setGuessedLetters([...guessedLetters, letter]);\n    } else {\n      setWrongGuesses(wrongGuesses + 1);\n      setIncorrectLetters([...incorrectLetters, letter]);\n    }\n  };\n  const handleReset = () => {\n    setWord('');\n    setGuessedLetters([]);\n    setWrongGuesses(0);\n    setIncorrectLetters([]);\n    setCurrentGuess('');\n    setShowHighscore(false);\n    // Fetch a new word\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:5000random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word);\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n    fetchRandomWord();\n  };\n  const handleInputChange = e => {\n    setCurrentGuess(e.target.value);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && currentGuess.length === 1) {\n      handleGuess(currentGuess.toLowerCase());\n      setCurrentGuess('');\n    }\n  };\n  const renderWord = () => {\n    return word.split('').map((letter, index) => guessedLetters.includes(letter) ? letter : '_').join(' ');\n  };\n  const isGameOver = wrongGuesses >= maxWrongGuesses;\n  const isGameWon = word.split('').every(letter => guessedLetters.includes(letter));\n  if (isGameWon) {\n    setTimeout(() => {\n      setShowHighscore(true);\n    }, 2000);\n  }\n  if (showHighscore) {\n    return /*#__PURE__*/_jsxDEV(Highscore, {\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hangman Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Word: \", renderWord()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wrong guesses: \", wrongGuesses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Incorrect letters: \", incorrectLetters.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: currentGuess,\n      onChange: handleInputChange,\n      onKeyPress: handleKeyPress,\n      maxLength: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Game Over! The word was: \", word]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 22\n    }, this), isGameWon && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Congratulations! You've guessed the word!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowHighscore(true),\n      children: \"Go to Highscore\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HEuZ1mresjxcH/2trHhH7UK9B7U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Route","Routes","React","useState","useEffect","Highscore","RecordList","Session_Set","Session_Delete","jsxDEV","_jsxDEV","App","_s","word","setWord","guessedLetters","setGuessedLetters","wrongGuesses","setWrongGuesses","incorrectLetters","setIncorrectLetters","currentGuess","setCurrentGuess","showHighscore","setShowHighscore","maxWrongGuesses","fetchRandomWord","response","fetch","ok","Error","data","json","error","console","handleGuess","letter","includes","handleReset","handleInputChange","e","target","value","handleKeyPress","key","length","toLowerCase","renderWord","split","map","index","join","isGameOver","isGameWon","every","setTimeout","onReset","fileName","_jsxFileName","lineNumber","columnNumber","className","children","type","onChange","onKeyPress","maxLength","onClick","_c","$RefreshReg$"],"sources":["/Users/carsonmoore/Downloads/summer24/cs3750/CS-3750-Hangman/frontend/src/App.js"],"sourcesContent":["import { Route, Routes } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport Highscore from './Highscores';\nimport RecordList from \"./components/recordList\";\n\n// import all the sessions we need, using session_set as maybe our start page???\nimport Session_Set from \"./components/session_set.js\";\nimport Session_Delete from \"./components/session_delete.js\";\n\nconst App = () => {\n  const [word, setWord] = useState('');\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const [incorrectLetters, setIncorrectLetters] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [showHighscore, setShowHighscore] = useState(false);\n  const maxWrongGuesses = 6;\n\n  // Fetch the random word from the server\n  useEffect(() => {\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word); // Adjust according to your response structure\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n\n    fetchRandomWord();\n  }, []);\n\n  const handleGuess = (letter) => {\n    if (guessedLetters.includes(letter) || incorrectLetters.includes(letter)) return;\n\n    if (word.includes(letter)) {\n      setGuessedLetters([...guessedLetters, letter]);\n    } else {\n      setWrongGuesses(wrongGuesses + 1);\n      setIncorrectLetters([...incorrectLetters, letter]);\n    }\n  };\n\n  const handleReset = () => {\n    setWord('');\n    setGuessedLetters([]);\n    setWrongGuesses(0);\n    setIncorrectLetters([]);\n    setCurrentGuess('');\n    setShowHighscore(false);\n    // Fetch a new word\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:5000random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word);\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n    fetchRandomWord();\n  };\n\n  const handleInputChange = (e) => {\n    setCurrentGuess(e.target.value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && currentGuess.length === 1) {\n      handleGuess(currentGuess.toLowerCase());\n      setCurrentGuess('');\n    }\n  };\n\n  const renderWord = () => {\n    return word.split('').map((letter, index) => (\n      guessedLetters.includes(letter) ? letter : '_'\n    )).join(' ');\n  };\n\n  const isGameOver = wrongGuesses >= maxWrongGuesses;\n  const isGameWon = word.split('').every(letter => guessedLetters.includes(letter));\n\n  if (isGameWon) {\n    setTimeout(() => {\n      setShowHighscore(true);\n    }, 2000);\n  }\n\n  if (showHighscore) {\n    return <Highscore onReset={handleReset} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Hangman Game</h1>\n      <p>Word: {renderWord()}</p>\n      <p>Wrong guesses: {wrongGuesses}</p>\n      <p>Incorrect letters: {incorrectLetters.join(', ')}</p>\n      <input\n        type=\"text\"\n        value={currentGuess}\n        onChange={handleInputChange}\n        onKeyPress={handleKeyPress}\n        maxLength=\"1\"\n      />\n      {isGameOver && <p>Game Over! The word was: {word}</p>}\n      {isGameWon && <p>Congratulations! You've guessed the word!</p>}\n      <button onClick={handleReset}>Reset Game</button>\n      {isGameOver && <button onClick={() => setShowHighscore(true)}>Go to Highscore</button>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}