{"ast":null,"code":"var _jsxFileName = \"/Users/carsonmoore/Downloads/summer24/cs3750/CS-3750-Hangman/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { Route, Routes } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport Highscore from './Highscores';\nimport RecordList from \"./components/recordList\";\n\n// Import all the sessions we need\nimport Session_Set from \"./components/session_set.js\";\nimport Session_Delete from \"./components/session_delete.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [word, setWord] = useState('');\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const [incorrectLetters, setIncorrectLetters] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [showHighscore, setShowHighscore] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const maxWrongGuesses = 6;\n  useEffect(() => {\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:4000/random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word);\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n    fetchRandomWord();\n  }, []);\n  useEffect(() => {\n    const gameOver = wrongGuesses >= maxWrongGuesses;\n    const gameWon = word.split('').every(letter => guessedLetters.includes(letter));\n    setIsGameOver(gameOver);\n    setIsGameWon(gameWon);\n    if (gameWon) {\n      const timeoutId = setTimeout(() => {\n        setShowHighscore(true);\n      }, 2000);\n      return () => clearTimeout(timeoutId);\n    }\n    if (gameOver) {\n      setShowHighscore(false);\n    }\n  }, [word, guessedLetters, wrongGuesses]);\n  const handleGuess = letter => {\n    if (guessedLetters.includes(letter) || incorrectLetters.includes(letter)) return;\n    if (word.includes(letter)) {\n      setGuessedLetters([...guessedLetters, letter]);\n    } else {\n      setWrongGuesses(wrongGuesses + 1);\n      setIncorrectLetters([...incorrectLetters, letter]);\n    }\n  };\n  const handleReset = () => {\n    setWord('');\n    setGuessedLetters([]);\n    setWrongGuesses(0);\n    setIncorrectLetters([]);\n    setCurrentGuess('');\n    setShowHighscore(false);\n    setIsGameOver(false);\n    setIsGameWon(false);\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:4000/random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word);\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n    fetchRandomWord();\n  };\n  const handleInputChange = e => {\n    setCurrentGuess(e.target.value);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && currentGuess.length === 1) {\n      handleGuess(currentGuess.toLowerCase());\n      setCurrentGuess('');\n    }\n  };\n  const renderWord = () => {\n    return word.split('').map((letter, index) => guessedLetters.includes(letter) ? letter : '_').join(' ');\n  };\n  if (showHighscore) {\n    return /*#__PURE__*/_jsxDEV(Highscore, {\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hangman Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Word: \", renderWord()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wrong guesses: \", wrongGuesses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Incorrect letters: \", incorrectLetters.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: currentGuess,\n      onChange: handleInputChange,\n      onKeyPress: handleKeyPress,\n      maxLength: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Game Over! The word was: \", word]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 22\n    }, this), isGameWon && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Congratulations! You've guessed the word!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowHighscore(true),\n      children: \"Go to Highscore\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vpjw73Hlbqlkwgc1pE4ArG7gfso=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Route","Routes","React","useState","useEffect","Highscore","RecordList","Session_Set","Session_Delete","jsxDEV","_jsxDEV","App","_s","word","setWord","guessedLetters","setGuessedLetters","wrongGuesses","setWrongGuesses","incorrectLetters","setIncorrectLetters","currentGuess","setCurrentGuess","showHighscore","setShowHighscore","isGameOver","setIsGameOver","isGameWon","setIsGameWon","maxWrongGuesses","fetchRandomWord","response","fetch","ok","Error","data","json","error","console","gameOver","gameWon","split","every","letter","includes","timeoutId","setTimeout","clearTimeout","handleGuess","handleReset","handleInputChange","e","target","value","handleKeyPress","key","length","toLowerCase","renderWord","map","index","join","onReset","fileName","_jsxFileName","lineNumber","columnNumber","className","children","type","onChange","onKeyPress","maxLength","onClick","_c","$RefreshReg$"],"sources":["/Users/carsonmoore/Downloads/summer24/cs3750/CS-3750-Hangman/frontend/src/App.js"],"sourcesContent":["import { Route, Routes } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport Highscore from './Highscores';\nimport RecordList from \"./components/recordList\";\n\n// Import all the sessions we need\nimport Session_Set from \"./components/session_set.js\";\nimport Session_Delete from \"./components/session_delete.js\";\n\nconst App = () => {\n  const [word, setWord] = useState('');\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const [incorrectLetters, setIncorrectLetters] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [showHighscore, setShowHighscore] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const maxWrongGuesses = 6;\n\n  useEffect(() => {\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:4000/random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word);\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n\n    fetchRandomWord();\n  }, []);\n\n  useEffect(() => {\n    const gameOver = wrongGuesses >= maxWrongGuesses;\n    const gameWon = word.split('').every(letter => guessedLetters.includes(letter));\n\n    setIsGameOver(gameOver);\n    setIsGameWon(gameWon);\n\n    if (gameWon) {\n      const timeoutId = setTimeout(() => {\n        setShowHighscore(true);\n      }, 2000);\n\n      return () => clearTimeout(timeoutId);\n    }\n\n    if (gameOver) {\n      setShowHighscore(false);\n    }\n  }, [word, guessedLetters, wrongGuesses]);\n\n  const handleGuess = (letter) => {\n    if (guessedLetters.includes(letter) || incorrectLetters.includes(letter)) return;\n\n    if (word.includes(letter)) {\n      setGuessedLetters([...guessedLetters, letter]);\n    } else {\n      setWrongGuesses(wrongGuesses + 1);\n      setIncorrectLetters([...incorrectLetters, letter]);\n    }\n  };\n\n  const handleReset = () => {\n    setWord('');\n    setGuessedLetters([]);\n    setWrongGuesses(0);\n    setIncorrectLetters([]);\n    setCurrentGuess('');\n    setShowHighscore(false);\n    setIsGameOver(false);\n    setIsGameWon(false);\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:4000/random-word');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setWord(data.word);\n      } catch (error) {\n        console.error(\"Error fetching the word:\", error);\n      }\n    };\n    fetchRandomWord();\n  };\n\n  const handleInputChange = (e) => {\n    setCurrentGuess(e.target.value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && currentGuess.length === 1) {\n      handleGuess(currentGuess.toLowerCase());\n      setCurrentGuess('');\n    }\n  };\n\n  const renderWord = () => {\n    return word.split('').map((letter, index) => (\n      guessedLetters.includes(letter) ? letter : '_'\n    )).join(' ');\n  };\n\n  if (showHighscore) {\n    return <Highscore onReset={handleReset} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Hangman Game</h1>\n      <p>Word: {renderWord()}</p>\n      <p>Wrong guesses: {wrongGuesses}</p>\n      <p>Incorrect letters: {incorrectLetters.join(', ')}</p>\n      <input\n        type=\"text\"\n        value={currentGuess}\n        onChange={handleInputChange}\n        onKeyPress={handleKeyPress}\n        maxLength=\"1\"\n      />\n      {isGameOver && <p>Game Over! The word was: {word}</p>}\n      {isGameWon && <p>Congratulations! You've guessed the word!</p>}\n      <button onClick={handleReset}>Reset Game</button>\n      {isGameOver && <button onClick={() => setShowHighscore(true)}>Go to Highscore</button>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}